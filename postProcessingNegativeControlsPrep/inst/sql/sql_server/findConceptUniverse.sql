/*in the event that a user does not have patient level information we will use
a static patient count provided by a large US claims database
this table will be a mix of drugs (ingredients) and conditions*/

SELECT c.CONCEPT_ID, c.CONCEPT_NAME,
	z.PERSON_COUNT_DC,
	z.PERSON_COUNT_RC
FROM (
	SELECT z.CONCEPT_ID,
		z.PERSON_COUNT_DC,
		CASE WHEN y.PERSON_COUNT_RC IS NULL THEN 0 ELSE y.PERSON_COUNT_RC END AS PERSON_COUNT_RC
	FROM (
		SELECT ca.ANCESTOR_CONCEPT_ID AS CONCEPT_ID,
			COUNT(DISTINCT co.PERSON_ID) AS PERSON_COUNT_DC
		FROM @schemaRaw.CONDITION_OCCURRENCE co
			JOIN @schemaRaw.CONCEPT_ANCESTOR ca
				ON ca.DESCENDANT_CONCEPT_ID = co.CONDITION_CONCEPT_ID
		WHERE CONDITION_CONCEPT_ID != 0
		AND YEAR(CONDITION_START_DATE) = YEAR(GETDATE())-2
		GROUP BY ca.ANCESTOR_CONCEPT_ID
		HAVING COUNT(DISTINCT co.PERSON_ID) >= @filter
	) z
		LEFT OUTER JOIN	(
			SELECT CONDITION_CONCEPT_ID AS CONCEPT_ID,
			  COUNT_BIG(DISTINCT PERSON_ID) AS PERSON_COUNT_RC
			FROM @schemaRaw.CONDITION_OCCURRENCE
			WHERE CONDITION_CONCEPT_ID != 0
			AND YEAR(CONDITION_START_DATE) = YEAR(GETDATE())-2
			GROUP BY CONDITION_CONCEPT_ID
		) y
			ON z.CONCEPT_ID = y.CONCEPT_ID

	UNION ALL

  /*Since we are using ingredients the RC/DC split doesn't make sense here,
  both will be set to the same number*/
	SELECT DRUG_CONCEPT_ID AS CONCEPT_ID,
		COUNT_BIG(DISTINCT PERSON_ID) AS PERSON_COUNT_RC,
		COUNT_BIG(DISTINCT PERSON_ID) AS PERSON_COUNT_DC
	FROM @schemaRaw.DRUG_ERA
	GROUP BY DRUG_CONCEPT_ID
	HAVING COUNT_BIG(DISTINCT PERSON_ID) >= @filter
) z
	JOIN @schemaRaw.CONCEPT c
		ON c.CONCEPT_ID = z.CONCEPT_ID
